********************************************************************************** (0) Globals and Locals*******************************************************************************clear allvers 10.1 cap log closeforeach ado in ivreg2 outreg2 estout ranktest mat2txt plausexog {	cap which `ado'	if _rc!=0 ssc install `ado'}* DIRECTORIESglobal Directory /Users/pedm/Documents/jobs/Damian-Clarkeglobal Data    "${Directory}/Data"global Source  "${Directory}/Code"global Log     "${Directory}/Log"global Graphs  "${Directory}/Results/Graphs"global Tables  "${Directory}/Results/Outreg"foreach dirname in Summary Twin DHS-OLS OLS RF DHS-IV IV Conley {	cap mkdir "$Tables/`dirname'"}* SWITCHES (1 if run, else not run)local zscores        0local OLS            1local IV             1local subsamples     0local fullcontrols   1local fixmissing     1local evalmissing    0* VARIABLES* We cannot obtain a measure of educf - Mother's years of education * Instead we use natural_mother_education_NVQ - mothers edu levelglobal outcomes Quality_EVSTSCO Quality_Number_Skills Quality_Word_Reading Quality_Pattern_Constructionglobal base malec _country* _yb* _dob*global age motherage motheragesq motheragecub agefirstbirthglobal S _mother_edu*global H height bmilocal prepend_DHS "DHS-"if `fullcontrols'==1{	global base $base _eth*	global S $S _inc*	global H $H daily_cig_before_preg weekly_alcohol_b_preg complications_during_preg	local prepend_DHS ""}* Note: If fullcontrols==0, we produce estimates using the same controls available in DHS* These estimates are stored in the folders DHS-OLS and DHS-IV* ECONOMETRIC SPECIFICATIONS* Only include CM that are available in Wave 5local cond if ALL==1 local se cluster(MCSID)local wt [pw=sweight]if `subsamples'==1{	local conditions ALL==1 income_quint==1 income_quint>1&income_quint<5 malec==0 malec==1	local fnames All LowIncome MidIncome Girls Boys}else{	local conditions ALL==1	local fnames All}********************************************************************************** (1) Setup (+ discretionary choices)******************************************************************************** NOTE: Using "legacy" data while I work on two different measures of birth orderuse "${Data}/Final/QQ-Ready-for-Regressions-Aug7.dta"gen ALL = 1replace bmi=. if bmi>50replace height=. if height>2.4replace height=. if height<0.8* Incorporate into the regression all observations with missing controlsif `fixmissing'==1{	* We need only add a zero, as these variables are categorical	foreach var of varlist country year_birth ethnic_group income_quint natural_mother_education_NVQ{		replace `var' = 0 if `var'==.	}		* Continuous variables: replace with zero and add a dummy to the regression	gen miss_motherage= motherage==.	replace motheragecub=0 if motherage==.	replace motheragesq=0 if motherage==.	replace motherage=0 if motherage==.	gen miss_agefirstbirth= agefirstbirth==.	replace agefirstbirth=0 if agefirstbirth==.	global age $age miss_motherage miss_agefirstbirth		foreach var of varlist $H{		gen miss_`var'= `var'==.		replace `var'=0 if `var'==.		global H $H miss_`var'	}}* Generate dummy varsqui tab country, gen(_country)qui tab year_birth, gen(_yb)qui tab ethnic_group, gen(_eth)qui tab income_quint, gen(_inc)qui tab natural_mother_education_NVQ, gen(_mother_edu)drop _mother_edu6 _inc5qui tab bord, gen(_bord)* All CM are born between 200-2002, thus this is a better measure than agetostring CM_DOB_Month CM_DOB_Year, replacegen CM_dob = CM_DOB_Year + "." + CM_DOB_Monthqui tab CM_dob, gen(_dob)if `zscores'==1{	* Generate Z scores of outcome variables	foreach var of varlist $outcomes {		egen `var'_sd=sd(`var')		egen `var'_mean=mean(`var')			gen Z`var'=(`var'-`var'_mean)/`var'_sd		drop `var'_sd `var'_mean		global outcomes $outcomes Z`var'	}}************************************************************************************ (1b) Investigate missing values - how can I increase sample size?********************************************************************************	if `evalmissing'==1{	keep `cond'	qui reg Quality_EVSTSCO fert $base $age $S $H, `se'	generate sample = e(sample)	tab sample	egen base_miss = rowmiss($base)	egen age_miss = rowmiss($age)	egen S_miss = rowmiss($S)	egen H_miss = rowmiss($H)	egen Q_miss = rowmiss($outcomes)	egen miss = rowmiss($base $age $S $H $outcomes)	* edit Qual fert $base $age $S $H if sample == 0}	* Fixed: Sample size has increased by 50% after adding bmi and height from wave1************************************************************************************ (2) Estimation samples for the IV regression********************************************************************************local max 1local fert 2foreach num in two three four {	* two_plus = 1 for the family that had 2+ births    gen `num'_plus=bord<=`max'&fert>=`fert'    replace `num'_plus=0 if NOCMHH != 1	* twin_two_fam = 1 if a family has a twin at the second birth and 0 otherwise	* TODO: this does not account for families that have multiple twin births  	gen twin_`num'_fam = (LaterTwin_birth_order == `fert')    local ++max    local ++fert}************************************************************************************ (3) Simple OLS of Q-Q (can then apply Altonji)********************************************************************************if `OLS'==1{	tokenize `fnames'	local i 1	foreach condition of local conditions {		local condition_name = "``i''"			local out "${Tables}/`prepend_DHS'OLS/`condition_name'.xls"		cap rm "`out'"		cap rm "${Tables}/`prepend_DHS'OLS/`condition_name'.txt"		foreach n in two three {			preserve			keep `cond'&`condition'&`n'_plus==1			foreach y of varlist $outcomes {									qui reg `y' fert $base $age $S $H, `se'						qui reg `y' fert $base $age `wt' if e(sample), `se'				qui outreg2 fert $age using "`out'", excel append						qui reg `y' fert $base $age $H `wt' if e(sample), `se'				qui outreg2 fert $age $H using "`out'", excel append						qui reg `y' fert $base $age $S $H `wt', `se'				qui outreg2 fert $age $S $H using "`out'", excel append				qui reg `y' fert $base $age $S $H _bord* `wt', `se'				outreg2 fert $age $S $H using "`out'", excel append				}			restore		}		local ++i	}}************************************************************************************ (4) IV (using twin at order n), subsequent inclusion of twin predictors********************************************************************************* I do not include cluster(MCSID) because our sample does not include non-singleton CMsif `IV'==1{	tokenize `fnames'	local i 1	foreach condition of local conditions {		local condition_name = "``i''"			local out "${Tables}/`prepend_DHS'IV/`condition_name'.xls"		cap rm "`out'"		cap rm "${Tables}/`prepend_DHS'IV/`condition_name'.txt"			foreach n in two three {			preserve			keep `cond'&`condition'&`n'_plus==1					foreach y of varlist $outcomes {				qui ivregress 2sls `y' `base' $age $S $H (fert=twin_`n'_fam) `wt'				qui ivregress 2sls `y' `base' (fert=twin_`n'_fam) `wt' if e(sample)						qui outreg2 fert $age using "`out'", excel append							qui ivregress 2sls `y' `base' $age $S (fert=twin_`n'_fam) `wt' if e(sample)				qui outreg2 fert $age $S using "`out'", excel append							qui ivregress 2sls `y' `base' $age $S $H (fert=twin_`n'_fam) `wt'				outreg2 fert $age $S $H using "`out'", excel append			}			restore		}		local ++i	}}